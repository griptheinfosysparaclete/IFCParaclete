Buildfile: /Users/GripGlebe/jdeveloper/mywork/IFCAspectJ/build.xml

helloworld:

init.variables:

aspectjtools.jar.available:

aspectjrt.jar.available:

init.taskdefs:

init:

Ajx:
     [echo] ##### Ajx list=files.lst class=test.output.HelloWorld

init.variables:

aspectjtools.jar.available:

aspectjrt.jar.available:

init.taskdefs:

init:

clean:
    [mkdir] Created dir: /Users/GripGlebe/jdeveloper/mywork/IFCAspectJ/classes
    [mkdir] Created dir: /Users/GripGlebe/jdeveloper/mywork/IFCAspectJ/jars
     [iajc] [error] build config error: source file does not exist: /Users/GripGlebe/jdeveloper/mywork/IFCAspectJ/IFCAspectJTest.java
     [iajc] 	
     [iajc] [error] build config error: source file does not exist: /Users/GripGlebe/jdeveloper/mywork/IFCAspectJ/HelloWorld.java
     [iajc] 	
     [iajc] AspectJ Compiler
     [iajc] 
     [iajc] 	Usage: <options> <source file | @argfile>..
     [iajc] 
     [iajc] AspectJ-specific options:
     [iajc] 	-inpath <list>      use classes in dirs and jars/zips in <list> as source
     [iajc] 	                    (<list> uses platform-specific path delimiter)
     [iajc] 	-injars <jarList>   use classes in <jarList> zip files as source
     [iajc] 	                    (<jarList> uses classpath delimiter)
     [iajc] 	                    deprecated - use inpath instead.
     [iajc] 	-aspectpath <list>  weave aspects in .class files from <list> dirs and jars/zip into sources
     [iajc] 	                    (<list> uses classpath delimiter)
     [iajc] 	-outjar <file>      put output classes in zip file <file>
     [iajc] 	-outxml             generate META-INF/aop.xml
     [iajc] 	-outxmlfile <file>  specify alternate destination output of -outxml
     [iajc] 	-argfile <file>     specify line-delimited list of source files
     [iajc] 	-showWeaveInfo      display information about weaving
     [iajc] 	-incremental        continuously-running compiler, needs -sourceroots
     [iajc] 	                    (reads stdin: enter to recompile and 'q' to quit)
     [iajc] 	-sourceroots <dirs> compile all .aj and .java files in <dirs>
     [iajc] 	                    (<dirs> uses classpath delimiter)
     [iajc] 	-crossrefs          generate .ajsym file into the output directory
     [iajc] 	-emacssym           generate .ajesym symbol files for emacs support
     [iajc] 	-Xlint              same as '-Xlint:warning'
     [iajc] 	-Xlint:<level>      set default level for crosscutting messages
     [iajc] 	                    (<level> may be ignore, warning, or error)
     [iajc] 	-Xlintfile <file>   specify properties file to set per-message levels
     [iajc] 	                    (cf org/aspectj/weaver/XlintDefault.properties)
     [iajc] 	-X                  print help on non-standard options
     [iajc] 
     [iajc] Standard Eclipse compiler options:
     [iajc]  Options enabled by default are prefixed with '+'
     [iajc]  
     [iajc]  Classpath options:
     [iajc]     -cp -classpath <directories and ZIP archives separated by ;>
     [iajc]                        specify location for application classes and sources
     [iajc]     -bootclasspath <directories and zip/jar files separated by ;>
     [iajc]                        specify location for system classes
     [iajc]     -d <dir>           destination directory (if omitted, no directory is created)
     [iajc]     -d none            generate no .class files
     [iajc]     -encoding <enc>    specify custom encoding for all sources. Each file/directory can override it
     [iajc]                        when suffixed with '['<enc>']' (e.g. X.java[utf8])
     [iajc]  
     [iajc]  Compliance options:
     [iajc]     -1.4             + use 1.4 compliance (-source 1.3 -target 1.2)
     [iajc]     -1.5 -5 -5.0       use 1.5 compliance (-source 1.5 -target 1.5)
     [iajc]     -1.6 -6 -6.0       use 1.6 compliance (-source 1.6 -target 1.6)
     [iajc]     -1.7 -7 -7.0       use 1.7 compliance (-source 1.7 -target 1.7)
     [iajc]     -1.8 -8 -8.0       use 1.8 compliance (-source 1.8 -target 1.8)
     [iajc]     -1.9 -9 -9.0       use 1.9 compliance (-source 1.9 -target 1.9)
     [iajc]     -10                for Java 10 (-source 10 -target 10)
     [iajc]     -11                for Java 11 (-source 11 -target 11)
     [iajc]     -12                for Java 12 (-source 12 -target 12)
     [iajc]     -13                for Java 13 (-source 13 -target 13)
     [iajc]     -14      			for Java 14 (-source 14 -target 14)
     [iajc]     -source <version>  set source level: 1.3 to 14 
     [iajc]     -target <version>  set classfile target: 1.1 to 14
     [iajc]  
     [iajc]  Warning options:
     [iajc]     -deprecation     + deprecation outside deprecated code (equivalent to
     [iajc]                        -warn:+deprecation)
     [iajc]     -nowarn -warn:none disable all warnings
     [iajc]     -warn:<warnings separated by ,>    enable exactly the listed warnings
     [iajc]     -warn:+<warnings separated by ,>   enable additional warnings
     [iajc]     -warn:-<warnings separated by ,>   disable specific warnings
     [iajc]       allDeadCode          dead code including trivial if(DEBUG) check
     [iajc]       allDeprecation       deprecation including inside deprecated code
     [iajc]       allJavadoc           invalid or missing javadoc
     [iajc]       allOver-ann          all missing @Override annotations
     [iajc]       all-static-method    all method can be declared as static warnings
     [iajc]       assertIdentifier   + 'assert' used as identifier
     [iajc]       boxing               autoboxing conversion
     [iajc]       charConcat         + char[] in String concat
     [iajc]       compareIdentical   + comparing identical expressions
     [iajc]       conditionAssign      possible accidental boolean assignment
     [iajc]       constructorName    + method with constructor name
     [iajc]       deadCode           + dead code excluding trivial if (DEBUG) check
     [iajc]       dep-ann              missing @Deprecated annotation
     [iajc]       deprecation        + deprecation outside deprecated code
     [iajc]       discouraged        + use of types matching a discouraged access rule
     [iajc]       emptyBlock           undocumented empty block
     [iajc]       enumIdentifier       'enum' used as identifier
     [iajc]       enumSwitch           incomplete enum switch
     [iajc]       enumSwitchPedantic + report missing enum switch cases even
     [iajc]                            in the presence of a default case
     [iajc]       fallthrough          possible fall-through case
     [iajc]       fieldHiding          field hiding another variable
     [iajc]       finalBound           type parameter with final bound
     [iajc]       finally            + finally block not completing normally
     [iajc]       forbidden          + use of types matching a forbidden access rule
     [iajc]       hashCode              missing hashCode() method when overriding equals()
     [iajc]       hiding               macro for fieldHiding, localHiding, typeHiding and
     [iajc]                            maskedCatchBlock
     [iajc]       includeAssertNull    raise null warnings for variables
     [iajc]                            that got tainted in an assert expression
     [iajc]       indirectStatic       indirect reference to static member
     [iajc]       inheritNullAnnot     inherit null annotations
     [iajc]       intfAnnotation     + annotation type used as super interface
     [iajc]       intfNonInherited   + interface non-inherited method compatibility
     [iajc]       intfRedundant        find redundant superinterfaces
     [iajc]       invalidJavadoc       all warnings for malformed javadoc tags
     [iajc]       invalidJavadocTag    validate javadoc tag arguments
     [iajc]       invalidJavadocTagDep validate deprecated references in javadoc tag args
     [iajc]       invalidJavadocTagNotVisible  validate non-visible references in javadoc
     [iajc] 							tag args
     [iajc]       invalidJavadocVisibility(<visibility>)  specify visibility modifier
     [iajc] 							for malformed javadoc tag warnings
     [iajc]       javadoc              invalid javadoc
     [iajc]       localHiding          local variable hiding another variable
     [iajc]       maskedCatchBlock   + hidden catch block
     [iajc]       missingJavadocTags   missing Javadoc tags
     [iajc]       missingJavadocTagsOverriding missing Javadoc tags in overriding methods
     [iajc]       missingJavadocTagsMethod missing Javadoc tags for method type parameter
     [iajc]       missingJavadocTagsVisibility(<visibility>)  specify visibility modifier
     [iajc] 							for missing javadoc tags warnings
     [iajc]       missingJavadocComments   missing Javadoc comments
     [iajc]       missingJavadocCommentsOverriding   missing Javadoc tags in overriding
     [iajc] 							methods
     [iajc]       missingJavadocCommentsVisibility(<visibility>)  specify visibility
     [iajc] 							modifier for missing javadoc comments warnings
     [iajc]       nls                  string literal lacking non-nls tag //$NON-NLS-<n>$
     [iajc]       noEffectAssign     + assignment without effect
     [iajc]       null                 potential missing or redundant null check
     [iajc]       nullAnnot(<annot. names separated by |>)   annotation based null analysis,
     [iajc]                            nullable|nonnull|nonnullbydefault annotation types
     [iajc]                            optionally specified using fully qualified names.
     [iajc] 							Enabling this option enables all null-annotation
     [iajc] 							related sub-options. These can be individually
     [iajc] 							controlled using options listed below.
     [iajc]       nullAnnotConflict    conflict between null annotation specified
     [iajc] 							and nullness inferred. Is effective only with
     [iajc] 							nullAnnot option enabled.
     [iajc]       nullAnnotRedundant   redundant specification of null annotation. Is
     [iajc] 							effective only with nullAnnot option enabled.
     [iajc]       nullDereference    + missing null check
     [iajc] 	   nullUncheckedConversion unchecked conversion from non-annotated type
     [iajc] 							to @NonNull type. Is effective only with
     [iajc] 							nullAnnot option enabled.
     [iajc]       over-ann             missing @Override annotation (superclass)
     [iajc]       paramAssign          assignment to a parameter
     [iajc]       pkgDefaultMethod   + attempt to override package-default method
     [iajc]       raw                + usage of raw type
     [iajc]       resource           + (pot.) unsafe usage of resource of type Closeable
     [iajc]       semicolon            unnecessary semicolon, empty statement
     [iajc]       serial             + missing serialVersionUID
     [iajc]       specialParamHiding   constructor or setter parameter hiding a field
     [iajc]       static-method        method can be declared as static
     [iajc]       static-access        macro for indirectStatic and staticReceiver
     [iajc]       staticReceiver     + non-static reference to static member
     [iajc]       super                overriding a method without making a super invocation
     [iajc]       suppress           + enable @SuppressWarnings
     [iajc]                            When used with -err:, it can also silence optional
     [iajc]                            errors and warnings
     [iajc]       switchDefault        switch statement lacking a default case
     [iajc]       syncOverride         missing synchronized in synchr. method override
     [iajc]       syntacticAnalysis    perform syntax-based null analysis for fields
     [iajc]       syntheticAccess      synthetic access for innerclass
     [iajc]       tasks(<tags separated by |>) tasks identified by tags inside comments
     [iajc]       typeHiding         + type parameter hiding another type
     [iajc]       unavoidableGenericProblems + ignore unavoidable type safety problems
     [iajc]                                    due to raw APIs
     [iajc]       unchecked          + unchecked type operation
     [iajc]       unlikelyCollectionMethodArgumentType
     [iajc]                          + unlikely argument type for collection method
     [iajc]                            declaring an Object parameter
     [iajc]       unlikelyEqualsArgumentType unlikely argument type for method equals()
     [iajc]       unnecessaryElse      unnecessary else clause
     [iajc]       unqualifiedField     unqualified reference to field
     [iajc]       unused               macro for unusedAllocation, unusedArgument,
     [iajc]                                unusedImport, unusedLabel, unusedLocal,
     [iajc]                                unusedPrivate, unusedThrown, and unusedTypeArgs,
     [iajc] 								unusedExceptionParam
     [iajc]       unusedAllocation     allocating an object that is not used
     [iajc]       unusedArgument       unread method parameter
     [iajc]       unusedExceptionParam unread exception parameter
     [iajc]       unusedImport       + unused import declaration
     [iajc]       unusedLabel        + unused label
     [iajc]       unusedLocal        + unread local variable
     [iajc]       unusedParam		    unused parameter
     [iajc]       unusedParamOverriding unused parameter for overriding method
     [iajc]       unusedParamImplementing unused parameter for implementing method
     [iajc]       unusedParamIncludeDoc unused parameter documented in comment tag
     [iajc]       unusedPrivate      + unused private member declaration
     [iajc]       unusedThrown         unused declared thrown exception
     [iajc]       unusedThrownWhenOverriding unused declared thrown exception in 
     [iajc] 							overriding method
     [iajc]       unusedThrownIncludeDocComment     unused declared thrown exception,
     [iajc] 							documented in a comment tag
     [iajc]       unusedThrownExemptExceptionThrowable  unused declared thrown exception,
     [iajc] 							exempt Exception and Throwable
     [iajc]       unusedTypeArgs     + unused type arguments for method and constructor
     [iajc]       uselessTypeCheck     unnecessary cast/instanceof operation
     [iajc]       varargsCast        + varargs argument need explicit cast
     [iajc]       warningToken       + unsupported or unnecessary @SuppressWarnings
     [iajc] 
     [iajc] 	
     [iajc] 
     [iajc] 1 fail|abort, 2 errors

BUILD FAILED
/Users/GripGlebe/jdeveloper/mywork/IFCAspectJ/build.xml:93: The following error occurred while executing this line:
/Users/GripGlebe/jdeveloper/mywork/IFCAspectJ/build.xml:73: compile errors: 255

Total time: 1 second
